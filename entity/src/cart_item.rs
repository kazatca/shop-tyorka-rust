//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::{entity::prelude::*, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "cart_item")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub count: u32,
    pub price: u32,
    pub order_id: String,
    pub product_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::order::Entity",
        from = "Column::OrderId",
        to = "super::order::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Order,
}

impl Related<super::order::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Order.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn before_save(self, insert: bool) -> Result<Self, DbErr> {
        if !insert || self.id.is_set() {
            return Ok(self);
        }

        Ok(Self {
            id: if insert && self.id.is_not_set() {
                Set(Uuid::new_v4().to_string())
            } else {
                self.id
            },
            count: if self.count.is_not_set() {
                Set(1)
            } else {
                self.count
            },
            ..self
        })
    }
}
