//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use chrono::Utc;
use sea_orm::{entity::prelude::*, ActiveValue::Set};
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "order")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub date: String,
    pub status: String,
    pub recipient_name: String,
    pub recipient_email: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::mail_sending::Entity")]
    MailSending,
    #[sea_orm(has_many = "super::cart_item::Entity")]
    CartItem,
}

impl Related<super::mail_sending::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MailSending.def()
    }
}

impl Related<super::cart_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CartItem.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn before_save(self, insert: bool) -> Result<Self, DbErr> {
        if !insert || self.id.is_set() {
            return Ok(self);
        }

        Ok(Self {
            id: if insert && self.id.is_not_set() {Set(Uuid::new_v4().to_string())} else {self.id},
            date: if self.date.is_not_set() {Set(Utc::now().to_string())} else {self.date},
            status: if self.status.is_not_set() {Set("CREATED".into())} else {self.status},
            ..self
        })
    }
}
